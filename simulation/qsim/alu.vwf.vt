// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/24/2018 11:30:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alu_vlg_sample_tst(
	F_input,
	Op_code,
	W_input,
	sampler_tx
);
input [7:0] F_input;
input [6:0] Op_code;
input [7:0] W_input;
output sampler_tx;

reg sample;
time current_time;
always @(F_input or Op_code or W_input)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alu_vlg_check_tst (
	F_output,
	W_output,
	sampler_rx
);
input [7:0] F_output;
input [7:0] W_output;
input sampler_rx;

reg [7:0] F_output_expected;
reg [7:0] W_output_expected;

reg [7:0] F_output_prev;
reg [7:0] W_output_prev;

reg [7:0] F_output_expected_prev;
reg [7:0] W_output_expected_prev;

reg [7:0] last_F_output_exp;
reg [7:0] last_W_output_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	F_output_prev = F_output;
	W_output_prev = W_output;
end

// update expected /o prevs

always @(trigger)
begin
	F_output_expected_prev = F_output_expected;
	W_output_expected_prev = W_output_expected;
end


// expected F_output[ 7 ]
initial
begin
	F_output_expected[7] = 1'bX;
end 
// expected F_output[ 6 ]
initial
begin
	F_output_expected[6] = 1'bX;
end 
// expected F_output[ 5 ]
initial
begin
	F_output_expected[5] = 1'bX;
end 
// expected F_output[ 4 ]
initial
begin
	F_output_expected[4] = 1'bX;
end 
// expected F_output[ 3 ]
initial
begin
	F_output_expected[3] = 1'bX;
end 
// expected F_output[ 2 ]
initial
begin
	F_output_expected[2] = 1'bX;
end 
// expected F_output[ 1 ]
initial
begin
	F_output_expected[1] = 1'bX;
end 
// expected F_output[ 0 ]
initial
begin
	F_output_expected[0] = 1'bX;
end 
// expected W_output[ 7 ]
initial
begin
	W_output_expected[7] = 1'bX;
end 
// expected W_output[ 6 ]
initial
begin
	W_output_expected[6] = 1'bX;
end 
// expected W_output[ 5 ]
initial
begin
	W_output_expected[5] = 1'bX;
end 
// expected W_output[ 4 ]
initial
begin
	W_output_expected[4] = 1'bX;
end 
// expected W_output[ 3 ]
initial
begin
	W_output_expected[3] = 1'bX;
end 
// expected W_output[ 2 ]
initial
begin
	W_output_expected[2] = 1'bX;
end 
// expected W_output[ 1 ]
initial
begin
	W_output_expected[1] = 1'bX;
end 
// expected W_output[ 0 ]
initial
begin
	W_output_expected[0] = 1'bX;
end 
// generate trigger
always @(F_output_expected or F_output or W_output_expected or W_output)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected F_output = %b | expected W_output = %b | ",F_output_expected_prev,W_output_expected_prev);
	$display("| real F_output = %b | real W_output = %b | ",F_output_prev,W_output_prev);
`endif
	if (
		( F_output_expected_prev[0] !== 1'bx ) && ( F_output_prev[0] !== F_output_expected_prev[0] )
		&& ((F_output_expected_prev[0] !== last_F_output_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[0] = F_output_expected_prev[0];
	end
	if (
		( F_output_expected_prev[1] !== 1'bx ) && ( F_output_prev[1] !== F_output_expected_prev[1] )
		&& ((F_output_expected_prev[1] !== last_F_output_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[1] = F_output_expected_prev[1];
	end
	if (
		( F_output_expected_prev[2] !== 1'bx ) && ( F_output_prev[2] !== F_output_expected_prev[2] )
		&& ((F_output_expected_prev[2] !== last_F_output_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[2] = F_output_expected_prev[2];
	end
	if (
		( F_output_expected_prev[3] !== 1'bx ) && ( F_output_prev[3] !== F_output_expected_prev[3] )
		&& ((F_output_expected_prev[3] !== last_F_output_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[3] = F_output_expected_prev[3];
	end
	if (
		( F_output_expected_prev[4] !== 1'bx ) && ( F_output_prev[4] !== F_output_expected_prev[4] )
		&& ((F_output_expected_prev[4] !== last_F_output_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[4] = F_output_expected_prev[4];
	end
	if (
		( F_output_expected_prev[5] !== 1'bx ) && ( F_output_prev[5] !== F_output_expected_prev[5] )
		&& ((F_output_expected_prev[5] !== last_F_output_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[5] = F_output_expected_prev[5];
	end
	if (
		( F_output_expected_prev[6] !== 1'bx ) && ( F_output_prev[6] !== F_output_expected_prev[6] )
		&& ((F_output_expected_prev[6] !== last_F_output_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[6] = F_output_expected_prev[6];
	end
	if (
		( F_output_expected_prev[7] !== 1'bx ) && ( F_output_prev[7] !== F_output_expected_prev[7] )
		&& ((F_output_expected_prev[7] !== last_F_output_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_output_expected_prev);
		$display ("     Real value = %b", F_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_F_output_exp[7] = F_output_expected_prev[7];
	end
	if (
		( W_output_expected_prev[0] !== 1'bx ) && ( W_output_prev[0] !== W_output_expected_prev[0] )
		&& ((W_output_expected_prev[0] !== last_W_output_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[0] = W_output_expected_prev[0];
	end
	if (
		( W_output_expected_prev[1] !== 1'bx ) && ( W_output_prev[1] !== W_output_expected_prev[1] )
		&& ((W_output_expected_prev[1] !== last_W_output_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[1] = W_output_expected_prev[1];
	end
	if (
		( W_output_expected_prev[2] !== 1'bx ) && ( W_output_prev[2] !== W_output_expected_prev[2] )
		&& ((W_output_expected_prev[2] !== last_W_output_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[2] = W_output_expected_prev[2];
	end
	if (
		( W_output_expected_prev[3] !== 1'bx ) && ( W_output_prev[3] !== W_output_expected_prev[3] )
		&& ((W_output_expected_prev[3] !== last_W_output_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[3] = W_output_expected_prev[3];
	end
	if (
		( W_output_expected_prev[4] !== 1'bx ) && ( W_output_prev[4] !== W_output_expected_prev[4] )
		&& ((W_output_expected_prev[4] !== last_W_output_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[4] = W_output_expected_prev[4];
	end
	if (
		( W_output_expected_prev[5] !== 1'bx ) && ( W_output_prev[5] !== W_output_expected_prev[5] )
		&& ((W_output_expected_prev[5] !== last_W_output_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[5] = W_output_expected_prev[5];
	end
	if (
		( W_output_expected_prev[6] !== 1'bx ) && ( W_output_prev[6] !== W_output_expected_prev[6] )
		&& ((W_output_expected_prev[6] !== last_W_output_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[6] = W_output_expected_prev[6];
	end
	if (
		( W_output_expected_prev[7] !== 1'bx ) && ( W_output_prev[7] !== W_output_expected_prev[7] )
		&& ((W_output_expected_prev[7] !== last_W_output_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_output[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_output_expected_prev);
		$display ("     Real value = %b", W_output_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_output_exp[7] = W_output_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] F_input;
reg [6:0] Op_code;
reg [7:0] W_input;
// wires                                               
wire [7:0] F_output;
wire [7:0] W_output;

wire sampler;                             

// assign statements (if any)                          
alu i1 (
// port map - connection between master ports and signals/registers   
	.F_input(F_input),
	.F_output(F_output),
	.Op_code(Op_code),
	.W_input(W_input),
	.W_output(W_output)
);
// F_input[ 7 ]
initial
begin
	F_input[7] = 1'b0;
end 
// F_input[ 6 ]
initial
begin
	F_input[6] = 1'b0;
	F_input[6] = #640000 1'b1;
end 
// F_input[ 5 ]
initial
begin
	F_input[5] = 1'b0;
	F_input[5] = #320000 1'b1;
	F_input[5] = #320000 1'b0;
	F_input[5] = #320000 1'b1;
end 
// F_input[ 4 ]
initial
begin
	repeat(3)
	begin
		F_input[4] = 1'b0;
		F_input[4] = #160000 1'b1;
		# 160000;
	end
	F_input[4] = 1'b0;
end 
// F_input[ 3 ]
initial
begin
	repeat(6)
	begin
		F_input[3] = 1'b0;
		F_input[3] = #80000 1'b1;
		# 80000;
	end
	F_input[3] = 1'b0;
end 
// F_input[ 2 ]
initial
begin
	repeat(12)
	begin
		F_input[2] = 1'b0;
		F_input[2] = #40000 1'b1;
		# 40000;
	end
	F_input[2] = 1'b0;
end 
// F_input[ 1 ]
always
begin
	F_input[1] = 1'b0;
	F_input[1] = #20000 1'b1;
	#20000;
end 
// F_input[ 0 ]
always
begin
	F_input[0] = 1'b0;
	F_input[0] = #10000 1'b1;
	#10000;
end 
// Op_code[ 6 ]
initial
begin
	Op_code[6] = 1'b0;
	Op_code[6] = #640000 1'b1;
end 
// Op_code[ 5 ]
initial
begin
	Op_code[5] = 1'b0;
	Op_code[5] = #320000 1'b1;
	Op_code[5] = #320000 1'b0;
	Op_code[5] = #320000 1'b1;
end 
// Op_code[ 4 ]
initial
begin
	repeat(3)
	begin
		Op_code[4] = 1'b0;
		Op_code[4] = #160000 1'b1;
		# 160000;
	end
	Op_code[4] = 1'b0;
end 
// Op_code[ 3 ]
initial
begin
	repeat(6)
	begin
		Op_code[3] = 1'b0;
		Op_code[3] = #80000 1'b1;
		# 80000;
	end
	Op_code[3] = 1'b0;
end 
// Op_code[ 2 ]
initial
begin
	repeat(12)
	begin
		Op_code[2] = 1'b0;
		Op_code[2] = #40000 1'b1;
		# 40000;
	end
	Op_code[2] = 1'b0;
end 
// Op_code[ 1 ]
always
begin
	Op_code[1] = 1'b0;
	Op_code[1] = #20000 1'b1;
	#20000;
end 
// Op_code[ 0 ]
always
begin
	Op_code[0] = 1'b0;
	Op_code[0] = #10000 1'b1;
	#10000;
end 
// W_input[ 7 ]
initial
begin
	W_input[7] = 1'b0;
end 
// W_input[ 6 ]
initial
begin
	W_input[6] = 1'b0;
	W_input[6] = #640000 1'b1;
end 
// W_input[ 5 ]
initial
begin
	W_input[5] = 1'b0;
	W_input[5] = #320000 1'b1;
	W_input[5] = #320000 1'b0;
	W_input[5] = #320000 1'b1;
end 
// W_input[ 4 ]
initial
begin
	repeat(3)
	begin
		W_input[4] = 1'b0;
		W_input[4] = #160000 1'b1;
		# 160000;
	end
	W_input[4] = 1'b0;
end 
// W_input[ 3 ]
initial
begin
	repeat(6)
	begin
		W_input[3] = 1'b0;
		W_input[3] = #80000 1'b1;
		# 80000;
	end
	W_input[3] = 1'b0;
end 
// W_input[ 2 ]
initial
begin
	repeat(12)
	begin
		W_input[2] = 1'b0;
		W_input[2] = #40000 1'b1;
		# 40000;
	end
	W_input[2] = 1'b0;
end 
// W_input[ 1 ]
always
begin
	W_input[1] = 1'b0;
	W_input[1] = #20000 1'b1;
	#20000;
end 
// W_input[ 0 ]
always
begin
	W_input[0] = 1'b0;
	W_input[0] = #10000 1'b1;
	#10000;
end 

alu_vlg_sample_tst tb_sample (
	.F_input(F_input),
	.Op_code(Op_code),
	.W_input(W_input),
	.sampler_tx(sampler)
);

alu_vlg_check_tst tb_out(
	.F_output(F_output),
	.W_output(W_output),
	.sampler_rx(sampler)
);
endmodule

